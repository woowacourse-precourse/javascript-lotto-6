import { GAME_REWARD } from '../src/constants/gameRule.js';
import calcProfit from '../src/utils/calcProfit.js';
import formatGamePrizes from '../src/utils/formatGamePrizes.js';
import formatLottoMatchResults from '../src/utils/formatLottoMatchResults.js';
import formatLottoNumbers from '../src/utils/formatLottoNumbers.js';

describe('üíô Util Ìï®ÏàòÎ•º ÌÖåÏä§Ìä∏Ìï©ÎãàÎã§. ‡∏Ö^._.^‡∏Ö', () => {
  test('[formatLottoNumbers] lottoNumbersÎ•º Ïù∏ÏûêÎ°ú Î∞õÏïÑ Ìè¨Îß§ÌåÖÎêú Î¨∏ÏûêÏó¥ÏùÑ Î∞òÌôòÌï¥Ïöî.', () => {
    const lottoNumbers = [8, 21, 23, 41, 42, 43];
    const expectedResult = '[8, 21, 23, 41, 42, 43]';

    expect(formatLottoNumbers(lottoNumbers)).toBe(expectedResult);
  });

  test('[calcProfit] Íµ¨ÏûÖ Í∏àÏï°Í≥º ÎãπÏ≤® Í∏àÏï°ÏùÑ Ïù∏ÏûêÎ°ú Î∞õÏïÑ Ìè¨Îß§ÌåÖÎêú ÏàòÏùµÎ•†ÏùÑ Î∞òÌôòÌï¥Ïöî.', () => {
    const mockData = {
      expectedResults: ['62.5%', '100,000.0%'],
      purchaseAmounts: [8_000, 30_000],
      winningAmounts: [5_000, 30_000_000],
    };

    mockData.expectedResults.forEach((expectedResult, i) => {
      expect(
        calcProfit(mockData.purchaseAmounts[i], mockData.winningAmounts[i]),
      ).toBe(expectedResult);
    });
  });

  test('[formatLottoMatchResults] ÎãπÏ≤® Î≤àÌò∏ ÏùºÏπò Í∞úÏàò Î∞∞Ïó¥Í≥º Î≥¥ÎÑàÏä§ Î≤àÌò∏ Î≥¥Ïú† Ïó¨Î∂Ä Î∞∞Ïó¥ÏùÑ Í∞ùÏ≤¥Î°ú Ìè¨Îß§ÌåÖÌï¥Ïöî.', () => {
    const winningMatchCounts = [3, 5, 0];
    const hasBonusMatches = [false, true, false];

    const formattedResults = formatLottoMatchResults(
      winningMatchCounts,
      hasBonusMatches,
    );

    expect(formattedResults).toEqual([
      { count: 3, hasBonusNumber: false },
      { count: 5, hasBonusNumber: true },
      { count: 0, hasBonusNumber: false },
    ]);
  });

  test('[formatLottoMatchResults] ÎãπÏ≤® Î≤àÌò∏ ÏùºÏπò Î∞∞Ïó¥Í≥º Î≥¥ÎÑàÏä§ Î≤àÌò∏ Î≥¥Ïú† Ïó¨Î∂Ä Î∞∞Ïó¥Ïù¥ ÎπÑÏñ¥ ÏûàÏúºÎ©¥ Îπà Î∞∞Ïó¥ÏùÑ Î∞òÌôòÌï¥Ïöî.', () => {
    const winningMatchCounts = [];
    const hasBonusMatches = [];

    const formattedResults = formatLottoMatchResults(
      winningMatchCounts,
      hasBonusMatches,
    );

    expect(formattedResults).toEqual([]);
  });

  test('[formatGamePrizes] ÏÉÅÍ∏à Ìè¨Îß∑ÌåÖÏù¥ Ïò¨Î∞îÎ•¥Í≤å Î∞òÌôòÎêòÎäîÏßÄ ÌôïÏù∏ÌïúÎã§.', () => {
    const matchCounts = {
      three: 0,
      four: 1,
      five: 0,
      bonus: 0,
      six: 1,
    };

    const expectedPrizeString = [
      `3Í∞ú ÏùºÏπò (${GAME_REWARD.three.toLocaleString()}Ïõê) - 0Í∞ú`,
      `4Í∞ú ÏùºÏπò (${GAME_REWARD.four.toLocaleString()}Ïõê) - 1Í∞ú`,
      `5Í∞ú ÏùºÏπò (${GAME_REWARD.five.toLocaleString()}Ïõê) - 0Í∞ú`,
      `5Í∞ú ÏùºÏπò, Î≥¥ÎÑàÏä§ Î≥º ÏùºÏπò (${GAME_REWARD.bonus.toLocaleString()}Ïõê) - 0Í∞ú`,
      `6Í∞ú ÏùºÏπò (${GAME_REWARD.six.toLocaleString()}Ïõê) - 1Í∞ú`,
    ].join('\n');

    const formattedPrize = formatGamePrizes(matchCounts);

    expect(formattedPrize).toBe(expectedPrizeString);
  });
});
